name: Certbot Certificate Renewal

on:
  schedule:
    - cron: '0 0 * * 1,4'  # 每周一和周四凌晨执行
  workflow_dispatch:  # 允许手动触发
  push:
    tags:
      - 'v*.*.*'  # 发布新版本时触发

jobs:
  renew-certificates:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史以便获取标签

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Create certificates directory
        run: mkdir -p ./certs

      - name: Create .env file
        run: |
          cat > .env <<EOL
          ALIYUN_REGION=${{ secrets.ALIYUN_REGION }}
          ALIYUN_ACCESS_KEY_ID=${{ secrets.ALIYUN_ACCESS_KEY_ID }}
          ALIYUN_ACCESS_KEY_SECRET=${{ secrets.ALIYUN_ACCESS_KEY_SECRET }}
          DOMAIN_ARG=${{ secrets.DOMAIN_ARG }}
          EMAIL=${{ secrets.EMAIL }}
          DNS_PROPAGATION_SECONDS=${DNS_PROPAGATION_SECONDS:-60}
          CHALLENGE_TYPE=${CHALLENGE_TYPE:-dns}
          CLOUD_PROVIDER=${CLOUD_PROVIDER:-aliyun}
          EOL

      - name: Run Certbot container
        run: |
          # 使用 tee 命令将输出同时发送到终端和文件
          docker run --rm \
            -v $(pwd)/.env:/.env \
            -v $(pwd)/certs:/etc/letsencrypt/certs \
            aiblaze/x.certbot:latest 2>&1 | tee certbot_output.log
          
          # 检查 Docker 命令的退出状态
          EXIT_CODE=${PIPESTATUS[0]}
          if [ $EXIT_CODE -ne 0 ]; then
            echo "::error::Certbot 容器执行失败，退出代码: $EXIT_CODE"
            cat certbot_output.log
            exit $EXIT_CODE
          else
            echo "::notice::Certbot 容器执行成功"
          fi

      - name: Parse server configurations
        id: parse-servers
        run: |
          if [ -z "${{ secrets.SERVERS }}" ]; then
            echo "::error::未配置SERVERS变量，请设置要部署的服务器列表"
            exit 1
          fi
          
          if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            echo "::error::未配置SSH_PRIVATE_KEY变量，请设置SSH私钥"
            exit 1
          fi
          
          # 设置全局变量，使用默认值（如果未指定）
          CERT_DIR="${{ secrets.CERT_DIR || '/etc/letsencrypt/certs' }}"
          CERT_UPDATED_HOOK_CMD="${{ secrets.CERT_UPDATED_HOOK_CMD || '' }}"
          
          echo "CERT_DIR=$CERT_DIR" >> $GITHUB_ENV
          echo "CERT_UPDATED_HOOK_CMD=$CERT_UPDATED_HOOK_CMD" >> $GITHUB_ENV
          
          # 解析多服务器配置
          # 简化格式: USER@HOST
          
          echo "CONFIGS<<EOF" >> $GITHUB_ENV
          IFS=$'\n'
          for server in $(echo "${{ secrets.SERVERS }}" | tr -d ' '); do
            if [ -n "$server" ]; then
              # 分割用户名和主机
              IFS='@' read -r username host <<< "$server"
              
              # 检查必要参数
              if [ -z "$username" ] || [ -z "$host" ]; then
                echo "::warning::服务器配置不完整，跳过: $server"
                continue
              fi
              
              # 配置保存到环境变量
              echo "$username@$host" >> $GITHUB_ENV
            fi
          done
          echo "EOF" >> $GITHUB_ENV
          echo "::notice::服务器配置已加载，使用简化的 USER@HOST 格式"
          
          # 创建SSH私钥文件
          SSH_KEY_FILE=$(mktemp)
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > $SSH_KEY_FILE
          chmod 600 $SSH_KEY_FILE
          echo "SSH_KEY_FILE=$SSH_KEY_FILE" >> $GITHUB_ENV

      - name: Deploy certificates to servers
        run: |
          # 读取所有服务器配置
          IFS=$'\n'
          for config in $CONFIGS; do
            # 分割配置字符串
            IFS='@' read -r username host <<< "$config"
            
            echo "::notice::正在部署证书到服务器: $host"
            
            # 使用SCP复制文件
            echo "正在复制证书到 $CERT_DIR"
            ssh -i $SSH_KEY_FILE -o StrictHostKeyChecking=no $username@$host "mkdir -p $CERT_DIR" 2>&1 || {
              echo "::error::无法在 $host 上创建目录 $CERT_DIR"
              continue
            }
            
            scp -i $SSH_KEY_FILE -o StrictHostKeyChecking=no -r ./certs/* $username@$host:$CERT_DIR 2>&1 || {
              echo "::error::无法复制证书到 $host"
              continue
            }
            
            # 执行证书更新后的钩子命令（如果有）
            if [ -n "$CERT_UPDATED_HOOK_CMD" ]; then
              echo "执行证书更新后的钩子命令..."
              ssh -i $SSH_KEY_FILE -o StrictHostKeyChecking=no $username@$host "$CERT_UPDATED_HOOK_CMD" 2>&1 || {
                echo "::warning::无法在 $host 上执行更新后的钩子命令"
              }
            else
              echo "未配置证书更新后的钩子命令，跳过"
            fi
            
            echo "::notice::完成部署到服务器: $host"
          done
          
          # 清理
          rm $SSH_KEY_FILE

      - name: Notify on success
        if: ${{ success() && secrets.WEBHOOK_URL != '' }}
        run: |
          echo "::notice::发送成功通知到 Webhook"
          curl -X POST -H "Content-Type: application/json" \
            -d '{"text":"✅ 证书已成功更新并部署到服务器"}' \
            ${{ secrets.WEBHOOK_URL }}

      - name: Notify on failure
        if: ${{ failure() && secrets.WEBHOOK_URL != '' }}
        run: |
          echo "::error::发送失败通知到 Webhook"
          curl -X POST -H "Content-Type: application/json" \
            -d '{"text":"❌ 证书更新失败，请检查日志"}' \
            ${{ secrets.WEBHOOK_URL }} 